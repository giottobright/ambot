/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Bar as PrismaBar,
  Location as PrismaLocation,
  BeerAvailability as PrismaBeerAvailability,
} from "@prisma/client";

export class BarServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BarCountArgs, "select">): Promise<number> {
    return this.prisma.bar.count(args);
  }

  async bars(args: Prisma.BarFindManyArgs): Promise<PrismaBar[]> {
    return this.prisma.bar.findMany(args);
  }
  async bar(args: Prisma.BarFindUniqueArgs): Promise<PrismaBar | null> {
    return this.prisma.bar.findUnique(args);
  }
  async createBar(args: Prisma.BarCreateArgs): Promise<PrismaBar> {
    return this.prisma.bar.create(args);
  }
  async updateBar(args: Prisma.BarUpdateArgs): Promise<PrismaBar> {
    return this.prisma.bar.update(args);
  }
  async deleteBar(args: Prisma.BarDeleteArgs): Promise<PrismaBar> {
    return this.prisma.bar.delete(args);
  }

  async findLocations(
    parentId: string,
    args: Prisma.LocationFindManyArgs
  ): Promise<PrismaLocation[]> {
    return this.prisma.bar
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .locations(args);
  }

  async findBeerAvailabilities(
    parentId: string,
    args: Prisma.BeerAvailabilityFindManyArgs
  ): Promise<PrismaBeerAvailability[]> {
    return this.prisma.bar
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .beerAvailabilities(args);
  }
}
