/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bar } from "./Bar";
import { BarCountArgs } from "./BarCountArgs";
import { BarFindManyArgs } from "./BarFindManyArgs";
import { BarFindUniqueArgs } from "./BarFindUniqueArgs";
import { CreateBarArgs } from "./CreateBarArgs";
import { UpdateBarArgs } from "./UpdateBarArgs";
import { DeleteBarArgs } from "./DeleteBarArgs";
import { LocationFindManyArgs } from "../../location/base/LocationFindManyArgs";
import { Location } from "../../location/base/Location";
import { BeerAvailabilityFindManyArgs } from "../../beerAvailability/base/BeerAvailabilityFindManyArgs";
import { BeerAvailability } from "../../beerAvailability/base/BeerAvailability";
import { BarService } from "../bar.service";
@graphql.Resolver(() => Bar)
export class BarResolverBase {
  constructor(protected readonly service: BarService) {}

  async _barsMeta(
    @graphql.Args() args: BarCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bar])
  async bars(@graphql.Args() args: BarFindManyArgs): Promise<Bar[]> {
    return this.service.bars(args);
  }

  @graphql.Query(() => Bar, { nullable: true })
  async bar(@graphql.Args() args: BarFindUniqueArgs): Promise<Bar | null> {
    const result = await this.service.bar(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bar)
  async createBar(@graphql.Args() args: CreateBarArgs): Promise<Bar> {
    return await this.service.createBar({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Bar)
  async updateBar(@graphql.Args() args: UpdateBarArgs): Promise<Bar | null> {
    try {
      return await this.service.updateBar({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bar)
  async deleteBar(@graphql.Args() args: DeleteBarArgs): Promise<Bar | null> {
    try {
      return await this.service.deleteBar(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Location], { name: "locations" })
  async findLocations(
    @graphql.Parent() parent: Bar,
    @graphql.Args() args: LocationFindManyArgs
  ): Promise<Location[]> {
    const results = await this.service.findLocations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [BeerAvailability], {
    name: "beerAvailabilities",
  })
  async findBeerAvailabilities(
    @graphql.Parent() parent: Bar,
    @graphql.Args() args: BeerAvailabilityFindManyArgs
  ): Promise<BeerAvailability[]> {
    const results = await this.service.findBeerAvailabilities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
