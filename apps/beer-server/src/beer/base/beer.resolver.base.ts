/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Beer } from "./Beer";
import { BeerCountArgs } from "./BeerCountArgs";
import { BeerFindManyArgs } from "./BeerFindManyArgs";
import { BeerFindUniqueArgs } from "./BeerFindUniqueArgs";
import { CreateBeerArgs } from "./CreateBeerArgs";
import { UpdateBeerArgs } from "./UpdateBeerArgs";
import { DeleteBeerArgs } from "./DeleteBeerArgs";
import { BeerAvailabilityFindManyArgs } from "../../beerAvailability/base/BeerAvailabilityFindManyArgs";
import { BeerAvailability } from "../../beerAvailability/base/BeerAvailability";
import { BeerService } from "../beer.service";
@graphql.Resolver(() => Beer)
export class BeerResolverBase {
  constructor(protected readonly service: BeerService) {}

  async _beersMeta(
    @graphql.Args() args: BeerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Beer])
  async beers(@graphql.Args() args: BeerFindManyArgs): Promise<Beer[]> {
    return this.service.beers(args);
  }

  @graphql.Query(() => Beer, { nullable: true })
  async beer(@graphql.Args() args: BeerFindUniqueArgs): Promise<Beer | null> {
    const result = await this.service.beer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Beer)
  async createBeer(@graphql.Args() args: CreateBeerArgs): Promise<Beer> {
    return await this.service.createBeer({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Beer)
  async updateBeer(@graphql.Args() args: UpdateBeerArgs): Promise<Beer | null> {
    try {
      return await this.service.updateBeer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Beer)
  async deleteBeer(@graphql.Args() args: DeleteBeerArgs): Promise<Beer | null> {
    try {
      return await this.service.deleteBeer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [BeerAvailability], {
    name: "beerAvailabilities",
  })
  async findBeerAvailabilities(
    @graphql.Parent() parent: Beer,
    @graphql.Args() args: BeerAvailabilityFindManyArgs
  ): Promise<BeerAvailability[]> {
    const results = await this.service.findBeerAvailabilities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
