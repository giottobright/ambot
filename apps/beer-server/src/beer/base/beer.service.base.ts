/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Beer as PrismaBeer,
  BeerAvailability as PrismaBeerAvailability,
} from "@prisma/client";

export class BeerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BeerCountArgs, "select">): Promise<number> {
    return this.prisma.beer.count(args);
  }

  async beers(args: Prisma.BeerFindManyArgs): Promise<PrismaBeer[]> {
    return this.prisma.beer.findMany(args);
  }
  async beer(args: Prisma.BeerFindUniqueArgs): Promise<PrismaBeer | null> {
    return this.prisma.beer.findUnique(args);
  }
  async createBeer(args: Prisma.BeerCreateArgs): Promise<PrismaBeer> {
    return this.prisma.beer.create(args);
  }
  async updateBeer(args: Prisma.BeerUpdateArgs): Promise<PrismaBeer> {
    return this.prisma.beer.update(args);
  }
  async deleteBeer(args: Prisma.BeerDeleteArgs): Promise<PrismaBeer> {
    return this.prisma.beer.delete(args);
  }

  async findBeerAvailabilities(
    parentId: string,
    args: Prisma.BeerAvailabilityFindManyArgs
  ): Promise<PrismaBeerAvailability[]> {
    return this.prisma.beer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .beerAvailabilities(args);
  }
}
